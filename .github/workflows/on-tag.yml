name: Build & deploy on git tag push

on:
  push:
    tags: [ '*' ]

jobs:
  build:
    name: Build BerkeleyDB
    runs-on: ubuntu-18.04

    strategy:
      matrix:
        arch:
          - amd64
          - arm64v8
          - arm32v7

    env:
      DOCKER_BUILDKIT: 1
      QEMU_VERSION: v4.2.0
      APP: berkeleydb

    steps:
      - uses: actions/checkout@v1.0.0

      ## Set full name of a git-${TAG}
      #   fmt:  vX.Y.Z[+build<N>]
      #   NOTE: Fails if TAG is not found
      - name: Set TAG (env var)
        run: |
          TAG="$(echo "${GITHUB_REF}" | grep 'refs/tags/' | awk -F/ '{print $NF}')"
          if [[ -z "${TAG}" ]]; then
            echo "This action has to be run on a git-tag push"
            exit 1
          fi
          echo ::set-env name=TAG::"${TAG}"

      ## Set ${BUILD} number out of the pushed git-tag
      #   fmt:  build<N>
      #   NOTE: Fails if BUILD tag was not set
      - name: Set BUILD (env var)
        run: |
          BUILD="$(echo "+${TAG}" | cut -d+ -f3)"
          if [[ -z "${BUILD}" ]]; then
            echo "ERR '+build<N>' must be appended to the git tag"
            exit 1
          fi
          echo ::set-env name=BUILD::"${BUILD}"

      - name: Print ENV VARs set above
        run: |
          printf "Git tag & arch processed:\n"
          printf "    APP: %s\n"  "${APP}"
          printf "   ARCH: %s\n"  "${{matrix.arch}}"
          printf "    TAG: %s\n"  "${TAG}"
          printf "  BUILD: %s\n"  "${BUILD}"

      - name: Register self-compiled qemu
        if: matrix.arch != 'amd64'
        run: docker run --rm --privileged meedamian/simple-qemu:${QEMU_VERSION} -p yes

      - name: Build Berkeleydb stage
        run: >
          docker build --no-cache .
          --build-arg "ARCH=${{matrix.arch}}"
          --label     arch="${{matrix.arch}}"
          --label     commit="${{github.sha}}"
          --label     git-tag="${TAG}"
          --label     guilty="${{github.actor}}"
          --label     repo-url="${{github.repositoryUrl}}"
          --tag       "${APP}:${{matrix.arch}}"

      - name: Show built image details
        run: docker images "${APP}"

      - name: Save image to a .tgz file
        run: |
          mkdir -p image/
          docker save "${APP}:${{matrix.arch}}" | gzip > "image/docker-${APP}-${TAG}-${{matrix.arch}}.tgz"

      - name: Print sha256sum of produced Docker image
        run: sha256sum image/*

      - name: Add Docker image as build artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: docker-images
          path: image/

  docker-hub:
    name: Tag & deploy to Docker Hub.  Only after successful build
    runs-on: ubuntu-18.04
    needs: build

    env:
      VERSION: v4.8.30.NC

    steps:
      - uses: actions/checkout@v1.0.0

      - name: Setup environment
        run: |
          echo ::set-env name=DOCKER_USER::"${GITHUB_ACTOR,,}"

          SLUG="$(echo ${GITHUB_REPOSITORY,,} | sed 's/docker-//')"
          echo ::set-env name=SLUG::"${SLUG}"

          echo ::set-env name=APP::"$(echo "${SLUG}" | awk -F/ '{print $NF}')"

          TAG="$(echo "${GITHUB_REF}" | grep 'refs/tags/' | awk -F/ '{print $NF}')"
          echo ::set-env name=TAG::"${TAG}"

          echo ::set-env name=BUILD::"$(echo "+${TAG}" | cut -d+ -f3)"

      - name: Print just set ENV VARs
        run: |
          printf "Just set env vars:\n"
          printf "   USER: %s\n"  "${DOCKER_USER}"
          printf "    TAG: %s\n"  "${TAG}"
          printf "   SLUG: %s\n"  "${SLUG}"
          printf "    APP: %s\n"  "${APP}"
          printf "VERSION: %s\n"  "${VERSION}"
          printf "  BUILD: %s\n"  "${BUILD}"

      - name: Enable manifests & print Docker version
        run: |
          mkdir -p ~/.docker
          echo '{ "experimental": "enabled" }' > ~/.docker/config.json
          sudo systemctl restart docker
          docker version

      - name: Download images built in build job
        uses: actions/download-artifact@v1.0.0
        with:
          name: docker-images

      - name: Print sha256sum of downloaded images
        run: sha256sum docker-images/*

      - name: Load images locally
        run: ls -d docker-images/* | xargs -I %  docker load -i "%"

      # No short tags;  bitcoind always uses that exact version;  pointless to complicate
      - name: Version-tag all images
        run: |
          for arch in $(docker images "${APP}" --format "{{.Tag}}"); do
            docker tag  "${APP}:${arch}"  "${SLUG}:${VERSION}-${arch}-${BUILD}"
            docker tag  "${APP}:${arch}"  "${SLUG}:${VERSION}-${arch}"
          done

      - name: List all tagged images
        run: docker images "${SLUG}"

      - name: Login to Docker Hub
        run: |
          echo "Logging in as ${DOCKER_USER}â€¦"
          echo "${{secrets.DOCKER_TOKEN}}" | docker login -u="${DOCKER_USER}" --password-stdin

      - name: Push all images
        run: docker images "${SLUG}" --format "{{.Repository}}:{{.Tag}}" | xargs -I %  docker push %

      - name: Create :v4.8.30.NC manifest
        run: >
          docker -D manifest create  "${SLUG}:${VERSION}" \
            "${SLUG}:${VERSION}-amd64" \
            "${SLUG}:${VERSION}-arm64v8" \
            "${SLUG}:${VERSION}-arm32v7"

      - name: Create :latest manifest
        run: >
          docker -D manifest create  "${SLUG}:latest"  \
            "${SLUG}:${VERSION}-amd64" \
            "${SLUG}:${VERSION}-arm64v8" \
            "${SLUG}:${VERSION}-arm32v7"

      - name: Annotate arm32v7
        run: |
          docker manifest annotate "${SLUG}:${VERSION}" "${SLUG}:${VERSION}-arm32v7"  --os linux  --arch arm  --variant v7
          docker manifest annotate "${SLUG}:latest"     "${SLUG}:${VERSION}-arm32v7"  --os linux  --arch arm  --variant v7

      - name: Annotate arm64v8
        run: |
          docker manifest annotate "${SLUG}:${VERSION}" "${SLUG}:${VERSION}-arm64v8"   --os linux  --arch arm64  --variant v8
          docker manifest annotate "${SLUG}:latest"     "${SLUG}:${VERSION}-arm64v8"   --os linux  --arch arm64  --variant v8

      - name: Print :v4.8.30.NC's details
        run: docker manifest inspect "${SLUG}:${VERSION}" | jq '.'

      - name: Print :latest's details
        run: docker manifest inspect "${SLUG}:latest" | jq '.'

      - name: Push manifest
        run: |
          docker manifest push "${SLUG}:${VERSION}"
          docker manifest push "${SLUG}:latest"
