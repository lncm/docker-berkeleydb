name: Build & deploy on git tag push

env:
  APP: berkeleydb

    # Capture groups within $TAG_FMT:
    #   \1 => TAG     v4.8.30.NC+build<N>
    #   \2 => BUILD   N
    TAG_FMT: '^refs/tags/(v4\.8\.30\.NC\+build([0-9]+))$'

on:
  push:
    tags: [ '*' ]

jobs:
  build:
    name: Build BerkeleyDB
    runs-on: ubuntu-18.04

    strategy:
      matrix:
        arch:
          - amd64
          - arm32v7
          - arm64v8

    env:
      QEMU_VERSION: v4.2.0
      DOCKER_BUILDKIT: 1

    steps:
      - uses: actions/checkout@v2

      - name: Setup environment
        run: |
          if ! echo "$GITHUB_REF" | grep -qE "$TAG_FMT"; then
            echo "ERR: TAG must be in format: v4.8.30.NC+build<N>"
            exit 1
          fi

          VERSION="v4.8.30.NC"

          echo ::set-env name=TAG::"$(echo "$GITHUB_REF" | sed -E "s|$TAG_FMT|\1|")"
          echo ::set-env name=BUILD::"$(echo "$GITHUB_REF" | sed -E "s|$TAG_FMT|\2|")"

      - name: Print ENV VARs set above
        run: |
          printf "  APP: %s\n"  "$APP"
          printf " ARCH: %s\n"  "${{ matrix.arch }}"
          printf "  TAG: %s\n"  "$TAG"
          printf "BUILD: %s\n"  "$BUILD"

      - name: Register self-compiled qemu
        if: matrix.arch != 'amd64'
        run: docker run --rm --privileged meedamian/simple-qemu:$QEMU_VERSION-${{ matrix.arch }} -p yes

      - name: Build ${{ env.APP }}
        run: >
          docker build --no-cache .
          --build-arg "ARCH=${{ matrix.arch }}"
          --label     "arch=${{ matrix.arch }}"
          --label     "commit=${{ github.sha }}"
          --label     "git-tag=$TAG"
          --label     "guilty=${{ github.actor }}"
          --label     "repo-url=${{ github.repositoryUrl }}"
          --tag       "$APP"

      - name: Show built image details
        run: docker images "$APP"

      - name: Save image to a .tgz file
        run: |
          mkdir -p images/

          docker tag  "$APP"  "$APP:${{ matrix.arch }}"
          docker save "$APP:${{ matrix.arch }}" | gzip > "images/docker-$APP-$TAG-${{ matrix.arch }}.tgz"

      - name: Print sha256sum of produced Docker image
        run: sha256sum images/*

      - name: Add Docker image as build artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: docker-images
          path: images/

  deploy:
    name: Deploy to Docker Hub & Github Releases.  Only after successful build.

    runs-on: ubuntu-18.04
    needs: build

    env:
      VERSION: v4.8.30.NC
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - name: Setup environment
        run: |
          echo ::set-env name=SLUG::"$(echo ${GITHUB_REPOSITORY,,} | sed 's/docker-//')"
          echo ::set-env name=BUILD::"$(echo "$GITHUB_REF" | sed -E "s|$TAG_FMT|\2|")"

      - name: Print just set ENV VARs
        run: |
          printf "    APP: %s\n"  "$APP"
          printf "VERSION: %s\n"  "$VERSION"
          printf "   SLUG: %s\n"  "$SLUG"
          printf "  BUILD: %s\n"  "$BUILD"

      - name: Download all build artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: docker-images

      - name: Print sha256sum of downloaded images
        run: sha256sum docker-images/*

      - name: Load images locally
        run: find docker-images  -exec docker load -i "{}" \;

      # No short tags;  bitcoind always uses that exact version;  pointless to complicate
      - name: Version-tag all images
        run: |
          for arch in $(docker images "$APP" --format "{{.Tag}}"); do
            docker tag  "$APP:$arch"  "$SLUG:$VERSION-$arch-build$BUILD"
            docker tag  "$APP:$arch"  "$SLUG:$VERSION-$arch"
          done

      - name: List all tagged images
        run: docker images "$SLUG"

      - name: Login to Docker Hub
        env:
          DOCKER_USER: meedamian
        run: |
          echo "Logging in as ${DOCKER_USER}â€¦"
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u="$DOCKER_USER" --password-stdin

      - name: Push all images
        run: docker images "$SLUG" --format "{{.Repository}}:{{.Tag}}" | xargs -I %  docker push %

      - name: Create :v4.8.30.NC manifest
        run: >
          docker -D manifest create  "$SLUG:$VERSION" \
            "$SLUG:$VERSION-amd64" \
            "$SLUG:$VERSION-arm32v7" \
            "$SLUG:$VERSION-arm64v8"

      - name: Create :latest manifest
        run: >
          docker -D manifest create  "$SLUG:latest"  \
            "$SLUG:$VERSION-amd64" \
            "$SLUG:$VERSION-arm32v7" \
            "$SLUG:$VERSION-arm64v8"

      - name: Annotate arm32v7
        run: |
          docker manifest annotate "$SLUG:$VERSION" "$SLUG:$VERSION-arm32v7"  --os linux  --arch arm  --variant v7
          docker manifest annotate "$SLUG:latest"   "$SLUG:$VERSION-arm32v7"  --os linux  --arch arm  --variant v7

      - name: Annotate arm64v8
        run: |
          docker manifest annotate "$SLUG:$VERSION" "$SLUG:$VERSION-arm64v8"  --os linux  --arch arm64  --variant v8
          docker manifest annotate "$SLUG:latest"   "$SLUG:$VERSION-arm64v8"  --os linux  --arch arm64  --variant v8

      - name: Print :${{ env.VERSION }}'s details
        run: docker manifest inspect "$SLUG:$VERSION" | jq '.'

      - name: Print :latest's details
        run: docker manifest inspect "$SLUG:latest" | jq '.'

      - name: Push manifest
        run: |
          docker manifest push "$SLUG:$VERSION"
          docker manifest push "$SLUG:latest"
